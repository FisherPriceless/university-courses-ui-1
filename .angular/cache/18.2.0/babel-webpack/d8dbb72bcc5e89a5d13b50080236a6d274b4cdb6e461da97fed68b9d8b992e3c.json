{"ast":null,"code":"import * as i1 from '@angular/cdk/bidi';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _ViewRepeaterOperation, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]], \"*\"];\nconst _c1 = [\"caption\", \"colgroup, col\", \"*\"];\nfunction CdkTable_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2);\n  }\n}\nfunction CdkTable_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"thead\", 0);\n    i0.ɵɵelementContainer(1, 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"tbody\", 0);\n    i0.ɵɵelementContainer(3, 2)(4, 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"tfoot\", 0);\n    i0.ɵɵelementContainer(6, 4);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CdkTable_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 1)(1, 2)(2, 3)(3, 4);\n  }\n}\nfunction CdkTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\nfunction CdkTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.dataAccessor(data_r2, ctx_r0.name), \" \");\n  }\n}\nexport { DataSource } from '@angular/cdk/collections';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, booleanAttribute, Inject, Optional, Input, ContentChild, inject, NgZone, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, Injector, afterNextRender, Attribute, SkipSelf, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = /*#__PURE__*/new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = /*#__PURE__*/new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nlet CdkCellDef = /*#__PURE__*/(() => {\n  class CdkCellDef {\n    constructor( /** @docs-private */template) {\n      this.template = template;\n    }\n    static #_ = this.ɵfac = function CdkCellDef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkCellDef,\n      selectors: [[\"\", \"cdkCellDef\", \"\"]],\n      standalone: true\n    });\n  }\n  return CdkCellDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nlet CdkHeaderCellDef = /*#__PURE__*/(() => {\n  class CdkHeaderCellDef {\n    constructor( /** @docs-private */template) {\n      this.template = template;\n    }\n    static #_ = this.ɵfac = function CdkHeaderCellDef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkHeaderCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkHeaderCellDef,\n      selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]],\n      standalone: true\n    });\n  }\n  return CdkHeaderCellDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nlet CdkFooterCellDef = /*#__PURE__*/(() => {\n  class CdkFooterCellDef {\n    constructor( /** @docs-private */template) {\n      this.template = template;\n    }\n    static #_ = this.ɵfac = function CdkFooterCellDef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkFooterCellDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkFooterCellDef,\n      selectors: [[\"\", \"cdkFooterCellDef\", \"\"]],\n      standalone: true\n    });\n  }\n  return CdkFooterCellDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nlet CdkColumnDef = /*#__PURE__*/(() => {\n  class CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n      return this._name;\n    }\n    set name(name) {\n      this._setNameInput(name);\n    }\n    /** Whether the cell is sticky. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(value) {\n      if (value !== this._sticky) {\n        this._sticky = value;\n        this._hasStickyChanged = true;\n      }\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n      return this._stickyEnd;\n    }\n    set stickyEnd(value) {\n      if (value !== this._stickyEnd) {\n        this._stickyEnd = value;\n        this._hasStickyChanged = true;\n      }\n    }\n    constructor(_table) {\n      this._table = _table;\n      this._hasStickyChanged = false;\n      this._sticky = false;\n      this._stickyEnd = false;\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this.resetStickyChanged();\n      return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n      this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n      // If the directive is set without a name (updated programmatically), then this setter will\n      // trigger with an empty string and should not overwrite the programmatically set value.\n      if (value) {\n        this._name = value;\n        this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n        this._updateColumnCssClassName();\n      }\n    }\n    static #_ = this.ɵfac = function CdkColumnDef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkColumnDef)(i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkColumnDef,\n      selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n      contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n          i0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n          i0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n        }\n      },\n      inputs: {\n        name: [0, \"cdkColumnDef\", \"name\"],\n        sticky: [2, \"sticky\", \"sticky\", booleanAttribute],\n        stickyEnd: [2, \"stickyEnd\", \"stickyEnd\", booleanAttribute]\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: CdkColumnDef\n      }]), i0.ɵɵInputTransformsFeature]\n    });\n  }\n  return CdkColumnDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n  }\n}\n/** Header cell template container that adds the right classes and role. */\nlet CdkHeaderCell = /*#__PURE__*/(() => {\n  class CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n      super(columnDef, elementRef);\n    }\n    static #_ = this.ɵfac = function CdkHeaderCell_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkHeaderCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkHeaderCell,\n      selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n      hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n      standalone: true,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return CdkHeaderCell;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer cell template container that adds the right classes and role. */\nlet CdkFooterCell = /*#__PURE__*/(() => {\n  class CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n      super(columnDef, elementRef);\n      const role = columnDef._table?._getCellRole();\n      if (role) {\n        elementRef.nativeElement.setAttribute('role', role);\n      }\n    }\n    static #_ = this.ɵfac = function CdkFooterCell_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkFooterCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkFooterCell,\n      selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n      hostAttrs: [1, \"cdk-footer-cell\"],\n      standalone: true,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return CdkFooterCell;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Cell template container that adds the right classes and role. */\nlet CdkCell = /*#__PURE__*/(() => {\n  class CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n      super(columnDef, elementRef);\n      const role = columnDef._table?._getCellRole();\n      if (role) {\n        elementRef.nativeElement.setAttribute('role', role);\n      }\n    }\n    static #_ = this.ɵfac = function CdkCell_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkCell)(i0.ɵɵdirectiveInject(CdkColumnDef), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkCell,\n      selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n      hostAttrs: [1, \"cdk-cell\"],\n      standalone: true,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return CdkCell;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @docs-private\n */\nclass _Schedule {\n  constructor() {\n    this.tasks = [];\n    this.endTasks = [];\n  }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = /*#__PURE__*/new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nlet _CoalescedStyleScheduler = /*#__PURE__*/(() => {\n  class _CoalescedStyleScheduler {\n    constructor(_unusedNgZone) {\n      this._currentSchedule = null;\n      this._ngZone = inject(NgZone);\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n      this._createScheduleIfNeeded();\n      this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n      this._createScheduleIfNeeded();\n      this._currentSchedule.endTasks.push(task);\n    }\n    _createScheduleIfNeeded() {\n      if (this._currentSchedule) {\n        return;\n      }\n      this._currentSchedule = new _Schedule();\n      this._ngZone.runOutsideAngular(() =>\n      // TODO(mmalerba): Scheduling this using something that runs less frequently\n      //  (e.g. requestAnimationFrame, setTimeout, etc.) causes noticeable jank with the column\n      //  resizer. We should audit the usages of schedule / scheduleEnd in that component and see\n      //  if we can refactor it so that we don't need to flush the tasks quite so frequently.\n      queueMicrotask(() => {\n        while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n          const schedule = this._currentSchedule;\n          // Capture new tasks scheduled by the current set of tasks.\n          this._currentSchedule = new _Schedule();\n          for (const task of schedule.tasks) {\n            task();\n          }\n          for (const task of schedule.endTasks) {\n            task();\n          }\n        }\n        this._currentSchedule = null;\n      }));\n    }\n    static #_ = this.ɵfac = function _CoalescedStyleScheduler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || _CoalescedStyleScheduler)(i0.ɵɵinject(i0.NgZone));\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: _CoalescedStyleScheduler,\n      factory: _CoalescedStyleScheduler.ɵfac\n    });\n  }\n  return _CoalescedStyleScheduler;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nlet BaseRowDef = /*#__PURE__*/(() => {\n  class BaseRowDef {\n    constructor( /** @docs-private */template, _differs) {\n      this.template = template;\n      this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n      // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n      // of the columns property or an empty array if none is provided.\n      if (!this._columnsDiffer) {\n        const columns = changes['columns'] && changes['columns'].currentValue || [];\n        this._columnsDiffer = this._differs.find(columns).create();\n        this._columnsDiffer.diff(columns);\n      }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n      return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n      if (this instanceof CdkHeaderRowDef) {\n        return column.headerCell.template;\n      }\n      if (this instanceof CdkFooterRowDef) {\n        return column.footerCell.template;\n      } else {\n        return column.cell.template;\n      }\n    }\n    static #_ = this.ɵfac = function BaseRowDef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BaseRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: BaseRowDef,\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return BaseRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nlet CdkHeaderRowDef = /*#__PURE__*/(() => {\n  class CdkHeaderRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(value) {\n      if (value !== this._sticky) {\n        this._sticky = value;\n        this._hasStickyChanged = true;\n      }\n    }\n    constructor(template, _differs, _table) {\n      super(template, _differs);\n      this._table = _table;\n      this._hasStickyChanged = false;\n      this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this.resetStickyChanged();\n      return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n    static #_ = this.ɵfac = function CdkHeaderRowDef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkHeaderRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkHeaderRowDef,\n      selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n      inputs: {\n        columns: [0, \"cdkHeaderRowDef\", \"columns\"],\n        sticky: [2, \"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute]\n      },\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return CdkHeaderRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nlet CdkFooterRowDef = /*#__PURE__*/(() => {\n  class CdkFooterRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(value) {\n      if (value !== this._sticky) {\n        this._sticky = value;\n        this._hasStickyChanged = true;\n      }\n    }\n    constructor(template, _differs, _table) {\n      super(template, _differs);\n      this._table = _table;\n      this._hasStickyChanged = false;\n      this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n      super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this.resetStickyChanged();\n      return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n    static #_ = this.ɵfac = function CdkFooterRowDef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkFooterRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkFooterRowDef,\n      selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n      inputs: {\n        columns: [0, \"cdkFooterRowDef\", \"columns\"],\n        sticky: [2, \"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute]\n      },\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return CdkFooterRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nlet CdkRowDef = /*#__PURE__*/(() => {\n  class CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n      super(template, _differs);\n      this._table = _table;\n    }\n    static #_ = this.ɵfac = function CdkRowDef_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkRowDef)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(CDK_TABLE, 8));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkRowDef,\n      selectors: [[\"\", \"cdkRowDef\", \"\"]],\n      inputs: {\n        columns: [0, \"cdkRowDefColumns\", \"columns\"],\n        when: [0, \"cdkRowDefWhen\", \"when\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return CdkRowDef;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nlet CdkCellOutlet = /*#__PURE__*/(() => {\n  class CdkCellOutlet {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static #_ = this.mostRecentCellOutlet = null;\n    constructor(_viewContainer) {\n      this._viewContainer = _viewContainer;\n      CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n      // If this was the last outlet being rendered in the view, remove the reference\n      // from the static property after it has been destroyed to avoid leaking memory.\n      if (CdkCellOutlet.mostRecentCellOutlet === this) {\n        CdkCellOutlet.mostRecentCellOutlet = null;\n      }\n    }\n    static #_2 = this.ɵfac = function CdkCellOutlet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkCellOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n    };\n    static #_3 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkCellOutlet,\n      selectors: [[\"\", \"cdkCellOutlet\", \"\"]],\n      standalone: true\n    });\n  }\n  return CdkCellOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nlet CdkHeaderRow = /*#__PURE__*/(() => {\n  class CdkHeaderRow {\n    static #_ = this.ɵfac = function CdkHeaderRow_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkHeaderRow)();\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: CdkHeaderRow,\n      selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n      hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 1,\n      vars: 0,\n      consts: [[\"cdkCellOutlet\", \"\"]],\n      template: function CdkHeaderRow_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementContainer(0, 0);\n        }\n      },\n      dependencies: [CdkCellOutlet],\n      encapsulation: 2\n    });\n  }\n  return CdkHeaderRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nlet CdkFooterRow = /*#__PURE__*/(() => {\n  class CdkFooterRow {\n    static #_ = this.ɵfac = function CdkFooterRow_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkFooterRow)();\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: CdkFooterRow,\n      selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n      hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 1,\n      vars: 0,\n      consts: [[\"cdkCellOutlet\", \"\"]],\n      template: function CdkFooterRow_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementContainer(0, 0);\n        }\n      },\n      dependencies: [CdkCellOutlet],\n      encapsulation: 2\n    });\n  }\n  return CdkFooterRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nlet CdkRow = /*#__PURE__*/(() => {\n  class CdkRow {\n    static #_ = this.ɵfac = function CdkRow_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkRow)();\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: CdkRow,\n      selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n      hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 1,\n      vars: 0,\n      consts: [[\"cdkCellOutlet\", \"\"]],\n      template: function CdkRow_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementContainer(0, 0);\n        }\n      },\n      dependencies: [CdkCellOutlet],\n      encapsulation: 2\n    });\n  }\n  return CdkRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\nlet CdkNoDataRow = /*#__PURE__*/(() => {\n  class CdkNoDataRow {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n      this._contentClassName = 'cdk-no-data-row';\n    }\n    static #_ = this.ɵfac = function CdkNoDataRow_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkNoDataRow)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkNoDataRow,\n      selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]],\n      standalone: true\n    });\n  }\n  return CdkNoDataRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   */\n  constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._isBrowser = _isBrowser;\n    this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n    this._positionListener = _positionListener;\n    this._cachedCellWidths = [];\n    this._borderCellCss = {\n      'top': `${_stickCellCss}-border-elem-top`,\n      'bottom': `${_stickCellCss}-border-elem-bottom`,\n      'left': `${_stickCellCss}-border-elem-left`,\n      'right': `${_stickCellCss}-border-elem-right`\n    };\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n  clearStickyPositioning(rows, stickyDirections) {\n    const elementsToClear = [];\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n      elementsToClear.push(row);\n      for (let i = 0; i < row.children.length; i++) {\n        elementsToClear.push(row.children[i]);\n      }\n    }\n    // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      for (const element of elementsToClear) {\n        this._removeStickyStyle(element, stickyDirections);\n      }\n    });\n  }\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n   *     column cell. If `false` cached widths will be used instead.\n   */\n  updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n    if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes: []\n        });\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes: []\n        });\n      }\n      return;\n    }\n    // Coalesce with sticky row updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      const firstRow = rows[0];\n      const numCells = firstRow.children.length;\n      const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n      const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n      const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n      const lastStickyStart = stickyStartStates.lastIndexOf(true);\n      const firstStickyEnd = stickyEndStates.indexOf(true);\n      const isRtl = this.direction === 'rtl';\n      const start = isRtl ? 'right' : 'left';\n      const end = isRtl ? 'left' : 'right';\n      for (const row of rows) {\n        for (let i = 0; i < numCells; i++) {\n          const cell = row.children[i];\n          if (stickyStartStates[i]) {\n            this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n          }\n          if (stickyEndStates[i]) {\n            this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n          }\n        }\n      }\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes: lastStickyStart === -1 ? [] : cellWidths.slice(0, lastStickyStart + 1).map((width, index) => stickyStartStates[index] ? width : null)\n        });\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes: firstStickyEnd === -1 ? [] : cellWidths.slice(firstStickyEnd).map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null).reverse()\n        });\n      }\n    });\n  }\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   */\n  stickRows(rowsToStick, stickyStates, position) {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n    // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n    // (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n      // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n      // sticky states need to be reversed as well.\n      const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n      const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n      // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n      const stickyOffsets = [];\n      const stickyCellHeights = [];\n      const elementsToStick = [];\n      for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n        stickyOffsets[rowIndex] = stickyOffset;\n        const row = rows[rowIndex];\n        elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];\n        const height = row.getBoundingClientRect().height;\n        stickyOffset += height;\n        stickyCellHeights[rowIndex] = height;\n      }\n      const borderedRowIndex = states.lastIndexOf(true);\n      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n        const offset = stickyOffsets[rowIndex];\n        const isBorderedRowIndex = rowIndex === borderedRowIndex;\n        for (const element of elementsToStick[rowIndex]) {\n          this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n        }\n      }\n      if (position === 'top') {\n        this._positionListener?.stickyHeaderRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick\n        });\n      } else {\n        this._positionListener?.stickyFooterRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick\n        });\n      }\n    });\n  }\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   */\n  updateStickyFooterContainer(tableElement, stickyStates) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n    // Coalesce with other sticky updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      const tfoot = tableElement.querySelector('tfoot');\n      if (tfoot) {\n        if (stickyStates.some(state => !state)) {\n          this._removeStickyStyle(tfoot, ['bottom']);\n        } else {\n          this._addStickyStyle(tfoot, 'bottom', 0, false);\n        }\n      }\n    });\n  }\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   */\n  _removeStickyStyle(element, stickyDirections) {\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n      element.classList.remove(this._borderCellCss[dir]);\n    }\n    // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    // Short-circuit checking element.style[dir] for stickyDirections as they\n    // were already removed above.\n    const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n    if (hasDirection) {\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    } else {\n      // When not hasDirection, _getCalculatedZIndex will always return ''.\n      element.style.zIndex = '';\n      if (this._needsPositionStickyOnElement) {\n        element.style.position = '';\n      }\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   */\n  _addStickyStyle(element, dir, dirValue, isBorderElement) {\n    element.classList.add(this._stickCellCss);\n    if (isBorderElement) {\n      element.classList.add(this._borderCellCss[dir]);\n    }\n    element.style[dir] = `${dirValue}px`;\n    element.style.zIndex = this._getCalculatedZIndex(element);\n    if (this._needsPositionStickyOnElement) {\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    }\n  }\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   */\n  _getCalculatedZIndex(element) {\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1\n    };\n    let zIndex = 0;\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    for (const dir of STICKY_DIRECTIONS) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n    return zIndex ? `${zIndex}` : '';\n  }\n  /** Gets the widths for each cell in the provided row. */\n  _getCellWidths(row, recalculateCellWidths = true) {\n    if (!recalculateCellWidths && this._cachedCellWidths.length) {\n      return this._cachedCellWidths;\n    }\n    const cellWidths = [];\n    const firstRowCells = row.children;\n    for (let i = 0; i < firstRowCells.length; i++) {\n      let cell = firstRowCells[i];\n      cellWidths.push(cell.getBoundingClientRect().width);\n    }\n    this._cachedCellWidths = cellWidths;\n    return cellWidths;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyStartColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyEndColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(`Could not find a matching row definition for the` + `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n  return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = /*#__PURE__*/new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nlet CdkRecycleRows = /*#__PURE__*/(() => {\n  class CdkRecycleRows {\n    static #_ = this.ɵfac = function CdkRecycleRows_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkRecycleRows)();\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkRecycleRows,\n      selectors: [[\"cdk-table\", \"recycleRows\", \"\"], [\"table\", \"cdk-table\", \"\", \"recycleRows\", \"\"]],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }])]\n    });\n  }\n  return CdkRecycleRows;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nlet DataRowOutlet = /*#__PURE__*/(() => {\n  class DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n      this.viewContainer = viewContainer;\n      this.elementRef = elementRef;\n      const table = inject(CDK_TABLE);\n      table._rowOutlet = this;\n      table._outletAssigned();\n    }\n    static #_ = this.ɵfac = function DataRowOutlet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DataRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: DataRowOutlet,\n      selectors: [[\"\", \"rowOutlet\", \"\"]],\n      standalone: true\n    });\n  }\n  return DataRowOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nlet HeaderRowOutlet = /*#__PURE__*/(() => {\n  class HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n      this.viewContainer = viewContainer;\n      this.elementRef = elementRef;\n      const table = inject(CDK_TABLE);\n      table._headerRowOutlet = this;\n      table._outletAssigned();\n    }\n    static #_ = this.ɵfac = function HeaderRowOutlet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HeaderRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: HeaderRowOutlet,\n      selectors: [[\"\", \"headerRowOutlet\", \"\"]],\n      standalone: true\n    });\n  }\n  return HeaderRowOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nlet FooterRowOutlet = /*#__PURE__*/(() => {\n  class FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n      this.viewContainer = viewContainer;\n      this.elementRef = elementRef;\n      const table = inject(CDK_TABLE);\n      table._footerRowOutlet = this;\n      table._outletAssigned();\n    }\n    static #_ = this.ɵfac = function FooterRowOutlet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FooterRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: FooterRowOutlet,\n      selectors: [[\"\", \"footerRowOutlet\", \"\"]],\n      standalone: true\n    });\n  }\n  return FooterRowOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nlet NoDataRowOutlet = /*#__PURE__*/(() => {\n  class NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n      this.viewContainer = viewContainer;\n      this.elementRef = elementRef;\n      const table = inject(CDK_TABLE);\n      table._noDataRowOutlet = this;\n      table._outletAssigned();\n    }\n    static #_ = this.ɵfac = function NoDataRowOutlet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NoDataRowOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NoDataRowOutlet,\n      selectors: [[\"\", \"noDataRowOutlet\", \"\"]],\n      standalone: true\n    });\n  }\n  return NoDataRowOutlet;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE =\n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nlet CdkTable = /*#__PURE__*/(() => {\n  class CdkTable {\n    /** Aria role to apply to the table's cells based on the table's own role. */\n    _getCellRole() {\n      if (this._cellRoleInternal === undefined) {\n        // Perform this lazily in case the table's role was updated by a directive after construction.\n        const role = this._elementRef.nativeElement.getAttribute('role');\n        const cellRole = role === 'grid' || role === 'treegrid' ? 'gridcell' : 'cell';\n        this._cellRoleInternal = this._isNativeHtmlTable && cellRole === 'cell' ? null : cellRole;\n      }\n      return this._cellRoleInternal;\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n      return this._trackByFn;\n    }\n    set trackBy(fn) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n      }\n      this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n      return this._dataSource;\n    }\n    set dataSource(dataSource) {\n      if (this._dataSource !== dataSource) {\n        this._switchDataSource(dataSource);\n      }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n      return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(value) {\n      this._multiTemplateDataRows = value;\n      // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n      // this setter will be invoked before the row outlet has been defined hence the null check.\n      if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n        this._forceRenderDataRows();\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n      return this._fixedLayout;\n    }\n    set fixedLayout(value) {\n      this._fixedLayout = value;\n      // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n      this._forceRecalculateCellWidths = true;\n      this._stickyColumnStylesNeedReset = true;\n    }\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler,\n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener,\n    /**\n     * @deprecated `_unusedNgZone` parameter to be removed.\n     * @breaking-change 19.0.0\n     */\n    _unusedNgZone) {\n      this._differs = _differs;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._dir = _dir;\n      this._platform = _platform;\n      this._viewRepeater = _viewRepeater;\n      this._coalescedStyleScheduler = _coalescedStyleScheduler;\n      this._viewportRuler = _viewportRuler;\n      this._stickyPositioningListener = _stickyPositioningListener;\n      /** Subject that emits when the component has been destroyed. */\n      this._onDestroy = new Subject();\n      /**\n       * Map of all the user's defined columns (header, data, and footer cell template) identified by\n       * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n       * any custom column definitions added to `_customColumnDefs`.\n       */\n      this._columnDefsByName = new Map();\n      /**\n       * Column definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * column definitions as *its* content child.\n       */\n      this._customColumnDefs = new Set();\n      /**\n       * Data row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * built-in data rows as *its* content child.\n       */\n      this._customRowDefs = new Set();\n      /**\n       * Header row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n       * built-in header rows as *its* content child.\n       */\n      this._customHeaderRowDefs = new Set();\n      /**\n       * Footer row definitions that were defined outside of the direct content children of the table.\n       * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n       * built-in footer row as *its* content child.\n       */\n      this._customFooterRowDefs = new Set();\n      /**\n       * Whether the header row definition has been changed. Triggers an update to the header row after\n       * content is checked. Initialized as true so that the table renders the initial set of rows.\n       */\n      this._headerRowDefChanged = true;\n      /**\n       * Whether the footer row definition has been changed. Triggers an update to the footer row after\n       * content is checked. Initialized as true so that the table renders the initial set of rows.\n       */\n      this._footerRowDefChanged = true;\n      /**\n       * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n       * change.\n       */\n      this._stickyColumnStylesNeedReset = true;\n      /**\n       * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n       * `false`, cached values will be used instead. This is only applicable to tables with\n       * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n       */\n      this._forceRecalculateCellWidths = true;\n      /**\n       * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n       * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n       * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n       * and row template matches, which allows the `IterableDiffer` to check rows by reference\n       * and understand which rows are added/moved/removed.\n       *\n       * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n       * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n       * contains an array of created pairs. The array is necessary to handle cases where the data\n       * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n       * stored.\n       */\n      this._cachedRenderRowsMap = new Map();\n      /**\n       * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n       * table subclasses.\n       */\n      this.stickyCssClass = 'cdk-table-sticky';\n      /**\n       * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n       * the position is set in a selector associated with the value of stickyCssClass. May be\n       * overridden by table subclasses\n       */\n      this.needsPositionStickyOnElement = true;\n      /** Whether the no data row is currently showing anything. */\n      this._isShowingNoDataRow = false;\n      /** Whether the table has rendered out all the outlets for the first time. */\n      this._hasAllOutlets = false;\n      /** Whether the table is done initializing. */\n      this._hasInitialized = false;\n      this._cellRoleInternal = undefined;\n      this._multiTemplateDataRows = false;\n      this._fixedLayout = false;\n      /**\n       * Emits when the table completes rendering a set of data rows based on the latest data from the\n       * data source, even if the set of rows is empty.\n       */\n      this.contentChanged = new EventEmitter();\n      // TODO(andrewseguin): Remove max value as the end index\n      //   and instead calculate the view on init and scroll.\n      /**\n       * Stream containing the latest information on what rows are being displayed on screen.\n       * Can be used by the data source to as a heuristic of what data should be provided.\n       *\n       * @docs-private\n       */\n      this.viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE\n      });\n      this._injector = inject(Injector);\n      if (!role) {\n        _elementRef.nativeElement.setAttribute('role', 'table');\n      }\n      this._document = _document;\n      this._isServer = !_platform.isBrowser;\n      this._isNativeHtmlTable = _elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    ngOnInit() {\n      this._setupStickyStyler();\n      // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n      // the user has provided a custom trackBy, return the result of that function as evaluated\n      // with the values of the `RenderRow`'s data and index.\n      this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n        return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n      });\n      this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n        this._forceRecalculateCellWidths = true;\n      });\n    }\n    ngAfterContentInit() {\n      this._hasInitialized = true;\n    }\n    ngAfterContentChecked() {\n      // Only start re-rendering in `ngAfterContentChecked` after the first render.\n      if (this._canRender()) {\n        this._render();\n      }\n    }\n    ngOnDestroy() {\n      [this._rowOutlet?.viewContainer, this._headerRowOutlet?.viewContainer, this._footerRowOutlet?.viewContainer, this._cachedRenderRowsMap, this._customColumnDefs, this._customRowDefs, this._customHeaderRowDefs, this._customFooterRowDefs, this._columnDefsByName].forEach(def => {\n        def?.clear();\n      });\n      this._headerRowDefs = [];\n      this._footerRowDefs = [];\n      this._defaultRowDef = null;\n      this._onDestroy.next();\n      this._onDestroy.complete();\n      if (isDataSource(this.dataSource)) {\n        this.dataSource.disconnect(this);\n      }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n      this._renderRows = this._getAllRenderRows();\n      const changes = this._dataDiffer.diff(this._renderRows);\n      if (!changes) {\n        this._updateNoDataRow();\n        this.contentChanged.next();\n        return;\n      }\n      const viewContainer = this._rowOutlet.viewContainer;\n      this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, change => {\n        if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n          this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n        }\n      });\n      // Update the meta context of a row's context data (index, count, first, last, ...)\n      this._updateRowIndexContext();\n      // Update rows that did not get added/removed/moved but may have had their identity changed,\n      // e.g. if trackBy matched data on some property but the actual data reference changed.\n      changes.forEachIdentityChange(record => {\n        const rowView = viewContainer.get(record.currentIndex);\n        rowView.context.$implicit = record.item.data;\n      });\n      this._updateNoDataRow();\n      afterNextRender(() => {\n        this.updateStickyColumnStyles();\n      }, {\n        injector: this._injector\n      });\n      this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n      this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n      this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n      this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n      this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.add(headerRowDef);\n      this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n      this._customHeaderRowDefs.delete(headerRowDef);\n      this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.add(footerRowDef);\n      this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n      this._customFooterRowDefs.delete(footerRowDef);\n      this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n      this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n      const headerRows = this._getRenderedRows(this._headerRowOutlet);\n      // Hide the thead element if there are no header rows. This is necessary to satisfy\n      // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n      // required child `row`.\n      if (this._isNativeHtmlTable) {\n        const thead = closestTableSection(this._headerRowOutlet, 'thead');\n        if (thead) {\n          thead.style.display = headerRows.length ? '' : 'none';\n        }\n      }\n      const stickyStates = this._headerRowDefs.map(def => def.sticky);\n      this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n      this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n      // Reset the dirty state of the sticky input change since it has been used.\n      this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n      const footerRows = this._getRenderedRows(this._footerRowOutlet);\n      // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n      // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n      // required child `row`.\n      if (this._isNativeHtmlTable) {\n        const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n        if (tfoot) {\n          tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n      }\n      const stickyStates = this._footerRowDefs.map(def => def.sticky);\n      this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n      this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n      this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n      // Reset the dirty state of the sticky input change since it has been used.\n      this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n      const headerRows = this._getRenderedRows(this._headerRowOutlet);\n      const dataRows = this._getRenderedRows(this._rowOutlet);\n      const footerRows = this._getRenderedRows(this._footerRowOutlet);\n      // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n      // In a table using a fixed layout, row content won't affect column width, so sticky styles\n      // don't need to be cleared unless either the sticky column config changes or one of the row\n      // defs change.\n      if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        this._stickyColumnStylesNeedReset = false;\n      }\n      // Update the sticky styles for each header row depending on the def's sticky state\n      headerRows.forEach((headerRow, i) => {\n        this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n      });\n      // Update the sticky styles for each data row depending on its def's sticky state\n      this._rowDefs.forEach(rowDef => {\n        // Collect all the rows rendered with this row definition.\n        const rows = [];\n        for (let i = 0; i < dataRows.length; i++) {\n          if (this._renderRows[i].rowDef === rowDef) {\n            rows.push(dataRows[i]);\n          }\n        }\n        this._addStickyColumnStyles(rows, rowDef);\n      });\n      // Update the sticky styles for each footer row depending on the def's sticky state\n      footerRows.forEach((footerRow, i) => {\n        this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n      });\n      // Reset the dirty state of the sticky input change since it has been used.\n      Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /** Invoked whenever an outlet is created and has been assigned to the table. */\n    _outletAssigned() {\n      // Trigger the first render once all outlets have been assigned. We do it this way, as\n      // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n      // the next change detection will happen.\n      // Also we can't use queries to resolve the outlets, because they're wrapped in a\n      // conditional, so we have to rely on them being assigned via DI.\n      if (!this._hasAllOutlets && this._rowOutlet && this._headerRowOutlet && this._footerRowOutlet && this._noDataRowOutlet) {\n        this._hasAllOutlets = true;\n        // In some setups this may fire before `ngAfterContentInit`\n        // so we need a check here. See #28538.\n        if (this._canRender()) {\n          this._render();\n        }\n      }\n    }\n    /** Whether the table has all the information to start rendering. */\n    _canRender() {\n      return this._hasAllOutlets && this._hasInitialized;\n    }\n    /** Renders the table if its state has changed. */\n    _render() {\n      // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n      this._cacheRowDefs();\n      this._cacheColumnDefs();\n      // Make sure that the user has at least added header, footer, or data row def.\n      if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMissingRowDefsError();\n      }\n      // Render updates if the list of columns have been changed for the header, row, or footer defs.\n      const columnsChanged = this._renderUpdatedColumns();\n      const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n      // Ensure sticky column styles are reset if set to `true` elsewhere.\n      this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n      this._forceRecalculateCellWidths = rowDefsChanged;\n      // If the header row definition has been changed, trigger a render to the header row.\n      if (this._headerRowDefChanged) {\n        this._forceRenderHeaderRows();\n        this._headerRowDefChanged = false;\n      }\n      // If the footer row definition has been changed, trigger a render to the footer row.\n      if (this._footerRowDefChanged) {\n        this._forceRenderFooterRows();\n        this._footerRowDefChanged = false;\n      }\n      // If there is a data source and row definitions, connect to the data source unless a\n      // connection has already been made.\n      if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n        this._observeRenderChanges();\n      } else if (this._stickyColumnStylesNeedReset) {\n        // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n        // called when it row data arrives. Otherwise, we need to call it proactively.\n        this.updateStickyColumnStyles();\n      }\n      this._checkStickyStates();\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n      const renderRows = [];\n      // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n      // new cache while unused ones can be picked up by garbage collection.\n      const prevCachedRenderRows = this._cachedRenderRowsMap;\n      this._cachedRenderRowsMap = new Map();\n      // For each data object, get the list of rows that should be rendered, represented by the\n      // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n      for (let i = 0; i < this._data.length; i++) {\n        let data = this._data[i];\n        const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n        if (!this._cachedRenderRowsMap.has(data)) {\n          this._cachedRenderRowsMap.set(data, new WeakMap());\n        }\n        for (let j = 0; j < renderRowsForData.length; j++) {\n          let renderRow = renderRowsForData[j];\n          const cache = this._cachedRenderRowsMap.get(renderRow.data);\n          if (cache.has(renderRow.rowDef)) {\n            cache.get(renderRow.rowDef).push(renderRow);\n          } else {\n            cache.set(renderRow.rowDef, [renderRow]);\n          }\n          renderRows.push(renderRow);\n        }\n      }\n      return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n      const rowDefs = this._getRowDefs(data, dataIndex);\n      return rowDefs.map(rowDef => {\n        const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n        if (cachedRenderRows.length) {\n          const dataRow = cachedRenderRows.shift();\n          dataRow.dataIndex = dataIndex;\n          return dataRow;\n        } else {\n          return {\n            data,\n            rowDef,\n            dataIndex\n          };\n        }\n      });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n      this._columnDefsByName.clear();\n      const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n      columnDefs.forEach(columnDef => {\n        if (this._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableDuplicateColumnNameError(columnDef.name);\n        }\n        this._columnDefsByName.set(columnDef.name, columnDef);\n      });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n      this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n      this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n      this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n      // After all row definitions are determined, find the row definition to be considered default.\n      const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n      if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMultipleDefaultRowDefsError();\n      }\n      this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n      const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n      // Force re-render data rows if the list of column definitions have changed.\n      const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n      if (dataColumnsChanged) {\n        this._forceRenderDataRows();\n      }\n      // Force re-render header/footer rows if the list of column definitions have changed.\n      const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n      if (headerColumnsChanged) {\n        this._forceRenderHeaderRows();\n      }\n      const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n      if (footerColumnsChanged) {\n        this._forceRenderFooterRows();\n      }\n      return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n      this._data = [];\n      if (isDataSource(this.dataSource)) {\n        this.dataSource.disconnect(this);\n      }\n      // Stop listening for data from the previous data source.\n      if (this._renderChangeSubscription) {\n        this._renderChangeSubscription.unsubscribe();\n        this._renderChangeSubscription = null;\n      }\n      if (!dataSource) {\n        if (this._dataDiffer) {\n          this._dataDiffer.diff([]);\n        }\n        if (this._rowOutlet) {\n          this._rowOutlet.viewContainer.clear();\n        }\n      }\n      this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n      // If no data source has been set, there is nothing to observe for changes.\n      if (!this.dataSource) {\n        return;\n      }\n      let dataStream;\n      if (isDataSource(this.dataSource)) {\n        dataStream = this.dataSource.connect(this);\n      } else if (isObservable(this.dataSource)) {\n        dataStream = this.dataSource;\n      } else if (Array.isArray(this.dataSource)) {\n        dataStream = of(this.dataSource);\n      }\n      if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownDataSourceError();\n      }\n      this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n        this._data = data || [];\n        this.renderRows();\n      });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n      // Clear the header row outlet if any content exists.\n      if (this._headerRowOutlet.viewContainer.length > 0) {\n        this._headerRowOutlet.viewContainer.clear();\n      }\n      this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n      this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n      // Clear the footer row outlet if any content exists.\n      if (this._footerRowOutlet.viewContainer.length > 0) {\n        this._footerRowOutlet.viewContainer.clear();\n      }\n      this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n      this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n      const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n        const columnDef = this._columnDefsByName.get(columnName);\n        if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownColumnError(columnName);\n        }\n        return columnDef;\n      });\n      const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n      const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n      this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n      const renderedRows = [];\n      for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n        const viewRef = rowOutlet.viewContainer.get(i);\n        renderedRows.push(viewRef.rootNodes[0]);\n      }\n      return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n      if (this._rowDefs.length == 1) {\n        return [this._rowDefs[0]];\n      }\n      let rowDefs = [];\n      if (this.multiTemplateDataRows) {\n        rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n      } else {\n        let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n        if (rowDef) {\n          rowDefs.push(rowDef);\n        }\n      }\n      if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableMissingMatchingRowDefError(data);\n      }\n      return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n      const rowDef = renderRow.rowDef;\n      const context = {\n        $implicit: renderRow.data\n      };\n      return {\n        templateRef: rowDef.template,\n        context,\n        index\n      };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n      // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n      const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n      this._renderCellTemplateForItem(rowDef, context);\n      return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n      for (let cellTemplate of this._getCellTemplates(rowDef)) {\n        if (CdkCellOutlet.mostRecentCellOutlet) {\n          CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n        }\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n      const viewContainer = this._rowOutlet.viewContainer;\n      for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n        const viewRef = viewContainer.get(renderIndex);\n        const context = viewRef.context;\n        context.count = count;\n        context.first = renderIndex === 0;\n        context.last = renderIndex === count - 1;\n        context.even = renderIndex % 2 === 0;\n        context.odd = !context.even;\n        if (this.multiTemplateDataRows) {\n          context.dataIndex = this._renderRows[renderIndex].dataIndex;\n          context.renderIndex = renderIndex;\n        } else {\n          context.index = this._renderRows[renderIndex].dataIndex;\n        }\n      }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n      if (!rowDef || !rowDef.columns) {\n        return [];\n      }\n      return Array.from(rowDef.columns, columnId => {\n        const column = this._columnDefsByName.get(columnId);\n        if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getTableUnknownColumnError(columnId);\n        }\n        return rowDef.extractCellTemplate(column);\n      });\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n      this._dataDiffer.diff([]);\n      this._rowOutlet.viewContainer.clear();\n      this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n      const stickyCheckReducer = (acc, d) => {\n        return acc || d.hasStickyChanged();\n      };\n      // Note that the check needs to occur for every definition since it notifies the definition\n      // that it can reset its dirty state. Using another operator like `some` may short-circuit\n      // remaining definitions and leave them in an unchecked state.\n      if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyHeaderRowStyles();\n      }\n      if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n        this.updateStickyFooterRowStyles();\n      }\n      if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n        this._stickyColumnStylesNeedReset = true;\n        this.updateStickyColumnStyles();\n      }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n      const direction = this._dir ? this._dir.value : 'ltr';\n      this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n      (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(value => {\n        this._stickyStyler.direction = value;\n        this.updateStickyColumnStyles();\n      });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n      return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n      const noDataRow = this._customNoDataRow || this._noDataRow;\n      if (!noDataRow) {\n        return;\n      }\n      const shouldShow = this._rowOutlet.viewContainer.length === 0;\n      if (shouldShow === this._isShowingNoDataRow) {\n        return;\n      }\n      const container = this._noDataRowOutlet.viewContainer;\n      if (shouldShow) {\n        const view = container.createEmbeddedView(noDataRow.templateRef);\n        const rootNode = view.rootNodes[0];\n        // Only add the attributes if we have a single root node since it's hard\n        // to figure out which one to add it to when there are multiple.\n        if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n          rootNode.setAttribute('role', 'row');\n          rootNode.classList.add(noDataRow._contentClassName);\n        }\n      } else {\n        container.clear();\n      }\n      this._isShowingNoDataRow = shouldShow;\n      this._changeDetectorRef.markForCheck();\n    }\n    static #_ = this.ɵfac = function CdkTable_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkTable)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵinjectAttribute('role'), i0.ɵɵdirectiveInject(i1.Directionality, 8), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), i0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER), i0.ɵɵdirectiveInject(i3.ViewportRuler), i0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12), i0.ɵɵdirectiveInject(i0.NgZone, 8));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: CdkTable,\n      selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n      contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\n          i0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\n          i0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\n          i0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\n          i0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n        }\n      },\n      hostAttrs: [1, \"cdk-table\"],\n      hostVars: 2,\n      hostBindings: function CdkTable_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n        }\n      },\n      inputs: {\n        trackBy: \"trackBy\",\n        dataSource: \"dataSource\",\n        multiTemplateDataRows: [2, \"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute],\n        fixedLayout: [2, \"fixedLayout\", \"fixedLayout\", booleanAttribute]\n      },\n      outputs: {\n        contentChanged: \"contentChanged\"\n      },\n      exportAs: [\"cdkTable\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CDK_TABLE,\n        useExisting: CdkTable\n      }, {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      },\n      // Prevent nested tables from seeing this table's StickyPositioningListener.\n      {\n        provide: STICKY_POSITIONING_LISTENER,\n        useValue: null\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c1,\n      decls: 5,\n      vars: 2,\n      consts: [[\"role\", \"rowgroup\"], [\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n      template: function CdkTable_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c0);\n          i0.ɵɵprojection(0);\n          i0.ɵɵprojection(1, 1);\n          i0.ɵɵtemplate(2, CdkTable_Conditional_2_Template, 1, 0)(3, CdkTable_Conditional_3_Template, 7, 0)(4, CdkTable_Conditional_4_Template, 4, 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional(ctx._isServer ? 2 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx._isNativeHtmlTable ? 3 : 4);\n        }\n      },\n      dependencies: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n      styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"],\n      encapsulation: 2\n    });\n  }\n  return CdkTable;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n  return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n  const uppercaseSection = section.toUpperCase();\n  let current = outlet.viewContainer.element.nativeElement;\n  while (current) {\n    // 1 is an element node.\n    const nodeName = current.nodeType === 1 ? current.nodeName : null;\n    if (nodeName === uppercaseSection) {\n      return current;\n    } else if (nodeName === 'TABLE') {\n      // Stop traversing past the `table` node.\n      break;\n    }\n    current = current.parentNode;\n  }\n  return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nlet CdkTextColumn = /*#__PURE__*/(() => {\n  class CdkTextColumn {\n    /** Column name that should be used to reference this column. */\n    get name() {\n      return this._name;\n    }\n    set name(name) {\n      this._name = name;\n      // With Ivy, inputs can be initialized before static query results are\n      // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n      this._syncColumnDefName();\n    }\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n      this._table = _table;\n      this._options = _options;\n      /** Alignment of the cell values. */\n      this.justify = 'start';\n      this._options = _options || {};\n    }\n    ngOnInit() {\n      this._syncColumnDefName();\n      if (this.headerText === undefined) {\n        this.headerText = this._createDefaultHeaderText();\n      }\n      if (!this.dataAccessor) {\n        this.dataAccessor = this._options.defaultDataAccessor || ((data, name) => data[name]);\n      }\n      if (this._table) {\n        // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n        // since the columnDef will not pick up its content by the time the table finishes checking\n        // its content and initializing the rows.\n        this.columnDef.cell = this.cell;\n        this.columnDef.headerCell = this.headerCell;\n        this._table.addColumnDef(this.columnDef);\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getTableTextColumnMissingParentTableError();\n      }\n    }\n    ngOnDestroy() {\n      if (this._table) {\n        this._table.removeColumnDef(this.columnDef);\n      }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n      const name = this.name;\n      if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableTextColumnMissingNameError();\n      }\n      if (this._options && this._options.defaultHeaderTextTransform) {\n        return this._options.defaultHeaderTextTransform(name);\n      }\n      return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n      if (this.columnDef) {\n        this.columnDef.name = this.name;\n      }\n    }\n    static #_ = this.ɵfac = function CdkTextColumn_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkTextColumn)(i0.ɵɵdirectiveInject(CdkTable, 8), i0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: CdkTextColumn,\n      selectors: [[\"cdk-text-column\"]],\n      viewQuery: function CdkTextColumn_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(CdkColumnDef, 7);\n          i0.ɵɵviewQuery(CdkCellDef, 7);\n          i0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        }\n      },\n      inputs: {\n        name: \"name\",\n        headerText: \"headerText\",\n        dataAccessor: \"dataAccessor\",\n        justify: \"justify\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 3,\n      vars: 0,\n      consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]],\n      template: function CdkTextColumn_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementContainerStart(0, 0);\n          i0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1)(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n          i0.ɵɵelementContainerEnd();\n        }\n      },\n      dependencies: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n      encapsulation: 2\n    });\n  }\n  return CdkTextColumn;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\nlet CdkTableModule = /*#__PURE__*/(() => {\n  class CdkTableModule {\n    static #_ = this.ɵfac = function CdkTableModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkTableModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CdkTableModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [ScrollingModule]\n    });\n  }\n  return CdkTableModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n * @deprecated Implement the `CanStick` interface instead.\n * @breaking-change 19.0.0\n */\nfunction mixinHasStickyInput(base) {\n  return class extends base {\n    /** Whether sticky positioning should be applied. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(v) {\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    /** Whether the sticky value has changed since this was last called. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n    constructor(...args) {\n      super(...args);\n      this._sticky = false;\n      /** Whether the sticky input has changed since it was last checked. */\n      this._hasStickyChanged = false;\n    }\n  };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };","map":{"version":3,"names":["i1","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","isDataSource","_ViewRepeaterOperation","_DisposeViewRepeaterStrategy","_c0","_c1","CdkTable_Conditional_2_Template","rf","ctx","i0","ɵɵprojection","CdkTable_Conditional_3_Template","ɵɵelementStart","ɵɵelementContainer","ɵɵelementEnd","CdkTable_Conditional_4_Template","CdkTextColumn_th_1_Template","ɵɵtext","ctx_r0","ɵɵnextContext","ɵɵstyleProp","justify","ɵɵadvance","ɵɵtextInterpolate1","headerText","CdkTextColumn_td_2_Template","data_r2","$implicit","dataAccessor","name","DataSource","i2","i3","ScrollingModule","DOCUMENT","InjectionToken","Directive","booleanAttribute","Inject","Optional","Input","ContentChild","inject","NgZone","Injectable","Component","ChangeDetectionStrategy","ViewEncapsulation","EmbeddedViewRef","EventEmitter","Injector","afterNextRender","Attribute","SkipSelf","Output","ContentChildren","ViewChild","NgModule","Subject","BehaviorSubject","isObservable","of","takeUntil","coerceBooleanProperty","CDK_TABLE","TEXT_COLUMN_OPTIONS","CdkCellDef","constructor","template","_","ɵfac","CdkCellDef_Factory","__ngFactoryType__","ɵɵdirectiveInject","TemplateRef","_2","ɵdir","ɵɵdefineDirective","type","selectors","standalone","ngDevMode","CdkHeaderCellDef","CdkHeaderCellDef_Factory","CdkFooterCellDef","CdkFooterCellDef_Factory","CdkColumnDef","_name","_setNameInput","sticky","_sticky","value","_hasStickyChanged","stickyEnd","_stickyEnd","_table","hasStickyChanged","resetStickyChanged","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","replace","CdkColumnDef_Factory","contentQueries","CdkColumnDef_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","cell","first","headerCell","footerCell","inputs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","BaseCdkCell","columnDef","elementRef","nativeElement","classList","add","CdkHeaderCell","CdkHeaderCell_Factory","ElementRef","hostAttrs","ɵɵInheritDefinitionFeature","CdkFooterCell","role","_getCellRole","setAttribute","CdkFooterCell_Factory","CdkCell","CdkCell_Factory","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_unusedNgZone","_currentSchedule","_ngZone","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","runOutsideAngular","queueMicrotask","length","_CoalescedStyleScheduler_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","BaseRowDef_Factory","IterableDiffers","ɵɵNgOnChangesFeature","CdkHeaderRowDef_Factory","CdkFooterRowDef_Factory","CdkRowDef","CdkRowDef_Factory","when","CdkCellOutlet","mostRecentCellOutlet","_viewContainer","ngOnDestroy","CdkCellOutlet_Factory","ViewContainerRef","_3","CdkHeaderRow","CdkHeaderRow_Factory","ɵcmp","ɵɵdefineComponent","ɵɵStandaloneFeature","decls","vars","consts","CdkHeaderRow_Template","dependencies","encapsulation","CdkFooterRow","CdkFooterRow_Factory","CdkFooterRow_Template","CdkRow","CdkRow_Factory","CdkRow_Template","CdkNoDataRow","templateRef","_contentClassName","CdkNoDataRow_Factory","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","nodeType","ELEMENT_NODE","i","children","element","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","slice","map","width","index","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","from","height","getBoundingClientRect","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","style","remove","hasDirection","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","widths","positions","nextPosition","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","STICKY_POSITIONING_LISTENER","CdkRecycleRows","CdkRecycleRows_Factory","useClass","DataRowOutlet","viewContainer","table","_rowOutlet","_outletAssigned","DataRowOutlet_Factory","HeaderRowOutlet","_headerRowOutlet","HeaderRowOutlet_Factory","FooterRowOutlet","_footerRowOutlet","FooterRowOutlet_Factory","NoDataRowOutlet","_noDataRowOutlet","NoDataRowOutlet_Factory","CDK_TABLE_TEMPLATE","RowViewRef","CdkTable","_cellRoleInternal","undefined","_elementRef","getAttribute","cellRole","trackBy","_trackByFn","fn","console","warn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_multiTemplateDataRows","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_fixedLayout","_forceRecalculateCellWidths","_stickyColumnStylesNeedReset","_changeDetectorRef","_dir","_document","_platform","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_hasAllOutlets","_hasInitialized","contentChanged","viewChange","Number","MAX_VALUE","_injector","_isServer","isBrowser","nodeName","ngOnInit","_setupStickyStyler","_dataDiffer","_i","dataRow","dataIndex","change","pipe","subscribe","ngAfterContentInit","ngAfterContentChecked","_canRender","_render","forEach","def","clear","_headerRowDefs","_footerRowDefs","_defaultRowDef","next","complete","disconnect","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","INSERTED","context","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","rowView","get","injector","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","closestTableSection","display","_stickyStyler","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","_rowDefs","footerRow","values","_cacheRowDefs","_cacheColumnDefs","columnsChanged","_renderUpdatedColumns","rowDefsChanged","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isArray","_renderRow","columnName","rowOutlet","renderedRows","viewRef","rootNodes","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","last","even","odd","columnId","stickyCheckReducer","d","items","_noDataRow","shouldShow","container","rootNode","CdkTable_Factory","ChangeDetectorRef","ɵɵinjectAttribute","Directionality","Platform","ViewportRuler","CdkTable_ContentQueries","hostVars","hostBindings","CdkTable_HostBindings","ɵɵclassProp","outputs","exportAs","useValue","ngContentSelectors","CdkTable_Template","ɵɵprojectionDef","ɵɵtemplate","ɵɵconditional","styles","array","concat","section","uppercaseSection","toUpperCase","current","parentNode","CdkTextColumn","_syncColumnDefName","_options","_createDefaultHeaderText","defaultDataAccessor","defaultHeaderTextTransform","CdkTextColumn_Factory","viewQuery","CdkTextColumn_Query","ɵɵviewQuery","CdkTextColumn_Template","ɵɵelementContainerStart","ɵɵelementContainerEnd","EXPORTED_DECLARATIONS","CdkTableModule","CdkTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","mixinHasStickyInput","base","v","prevValue","args"],"sources":["/Users/kyriakoskoutsos/university-courses-ui-1/node_modules/@angular/cdk/fesm2022/table.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/bidi';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _ViewRepeaterOperation, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, booleanAttribute, Inject, Optional, Input, ContentChild, inject, NgZone, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, Injector, afterNextRender, Attribute, SkipSelf, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkCellDef, isStandalone: true, selector: \"[cdkCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkHeaderCellDef, isStandalone: true, selector: \"[cdkHeaderCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkFooterCellDef, isStandalone: true, selector: \"[cdkFooterCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /** Whether the cell is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(value) {\n        if (value !== this._stickyEnd) {\n            this._stickyEnd = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(_table) {\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n        this._stickyEnd = false;\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkColumnDef, deps: [{ token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkColumnDef, isStandalone: true, selector: \"[cdkColumnDef]\", inputs: { name: [\"cdkColumnDef\", \"name\"], sticky: [\"sticky\", \"sticky\", booleanAttribute], stickyEnd: [\"stickyEnd\", \"stickyEnd\", booleanAttribute] }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], sticky: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], stickyEnd: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkHeaderCell, isStandalone: true, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkFooterCell, isStandalone: true, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkCell, isStandalone: true, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_unusedNgZone) {\n        this._currentSchedule = null;\n        this._ngZone = inject(NgZone);\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._ngZone.runOutsideAngular(() => \n        // TODO(mmalerba): Scheduling this using something that runs less frequently\n        //  (e.g. requestAnimationFrame, setTimeout, etc.) causes noticeable jank with the column\n        //  resizer. We should audit the usages of schedule / scheduleEnd in that component and see\n        //  if we can refactor it so that we don't need to flush the tasks quite so frequently.\n        queueMicrotask(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _CoalescedStyleScheduler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.NgZone }] });\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: BaseRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: BaseRowDef, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }] });\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkHeaderRowDef, isStandalone: true, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkHeaderRowDef' }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkHeaderRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkFooterRowDef, isStandalone: true, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkFooterRowDef' }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkFooterRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkRowDef, isStandalone: true, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: [\n                        { name: 'columns', alias: 'cdkRowDefColumns' },\n                        { name: 'when', alias: 'cdkRowDefWhen' },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }] });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static { this.mostRecentCellOutlet = null; }\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellOutlet, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkCellOutlet, isStandalone: true, selector: \"[cdkCellOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkHeaderRow, isStandalone: true, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkFooterRow, isStandalone: true, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkRow, isStandalone: true, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._contentClassName = 'cdk-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkNoDataRow, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkNoDataRow, isStandalone: true, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const firstRow = rows[0];\n            const numCells = firstRow.children.length;\n            const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n            const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n            const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n            const lastStickyStart = stickyStartStates.lastIndexOf(true);\n            const firstStickyEnd = stickyEndStates.indexOf(true);\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1\n                        ? []\n                        : cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => (stickyStartStates[index] ? width : null)),\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1\n                        ? []\n                        : cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                            .reverse(),\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n            // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n            // sticky states need to be reversed as well.\n            const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n            const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n            // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n            const stickyOffsets = [];\n            const stickyCellHeights = [];\n            const elementsToStick = [];\n            for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                stickyOffsets[rowIndex] = stickyOffset;\n                const row = rows[rowIndex];\n                elementsToStick[rowIndex] = this._isNativeHtmlTable\n                    ? Array.from(row.children)\n                    : [row];\n                const height = row.getBoundingClientRect().height;\n                stickyOffset += height;\n                stickyCellHeights[rowIndex] = height;\n            }\n            const borderedRowIndex = states.lastIndexOf(true);\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                this._positionListener?.stickyHeaderRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n            else {\n                this._positionListener?.stickyFooterRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const tfoot = tableElement.querySelector('tfoot');\n            if (tfoot) {\n                if (stickyStates.some(state => !state)) {\n                    this._removeStickyStyle(tfoot, ['bottom']);\n                }\n                else {\n                    this._addStickyStyle(tfoot, 'bottom', 0, false);\n                }\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkRecycleRows, isStandalone: true, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._rowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: DataRowOutlet, isStandalone: true, selector: \"[rowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[rowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._headerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: HeaderRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: HeaderRowOutlet, isStandalone: true, selector: \"[headerRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[headerRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._footerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: FooterRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: FooterRowOutlet, isStandalone: true, selector: \"[footerRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[footerRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._noDataRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: NoDataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: NoDataRowOutlet, isStandalone: true, selector: \"[noDataRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[noDataRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    /** Aria role to apply to the table's cells based on the table's own role. */\n    _getCellRole() {\n        if (this._cellRoleInternal === undefined) {\n            // Perform this lazily in case the table's role was updated by a directive after construction.\n            const role = this._elementRef.nativeElement.getAttribute('role');\n            const cellRole = role === 'grid' || role === 'treegrid' ? 'gridcell' : 'cell';\n            this._cellRoleInternal = this._isNativeHtmlTable && cellRole === 'cell' ? null : cellRole;\n        }\n        return this._cellRoleInternal;\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(value) {\n        this._multiTemplateDataRows = value;\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(value) {\n        this._fixedLayout = value;\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener, \n    /**\n     * @deprecated `_unusedNgZone` parameter to be removed.\n     * @breaking-change 19.0.0\n     */\n    _unusedNgZone) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        /** Whether the table has rendered out all the outlets for the first time. */\n        this._hasAllOutlets = false;\n        /** Whether the table is done initializing. */\n        this._hasInitialized = false;\n        this._cellRoleInternal = undefined;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        /**\n         * Emits when the table completes rendering a set of data rows based on the latest data from the\n         * data source, even if the set of rows is empty.\n         */\n        this.contentChanged = new EventEmitter();\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n        this._injector = inject(Injector);\n        if (!role) {\n            _elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isServer = !_platform.isBrowser;\n        this._isNativeHtmlTable = _elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentInit() {\n        this._hasInitialized = true;\n    }\n    ngAfterContentChecked() {\n        // Only start re-rendering in `ngAfterContentChecked` after the first render.\n        if (this._canRender()) {\n            this._render();\n        }\n    }\n    ngOnDestroy() {\n        [\n            this._rowOutlet?.viewContainer,\n            this._headerRowOutlet?.viewContainer,\n            this._footerRowOutlet?.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach((def) => {\n            def?.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        afterNextRender(() => {\n            this.updateStickyColumnStyles();\n        }, { injector: this._injector });\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const thead = closestTableSection(this._headerRowOutlet, 'thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /** Invoked whenever an outlet is created and has been assigned to the table. */\n    _outletAssigned() {\n        // Trigger the first render once all outlets have been assigned. We do it this way, as\n        // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n        // the next change detection will happen.\n        // Also we can't use queries to resolve the outlets, because they're wrapped in a\n        // conditional, so we have to rely on them being assigned via DI.\n        if (!this._hasAllOutlets &&\n            this._rowOutlet &&\n            this._headerRowOutlet &&\n            this._footerRowOutlet &&\n            this._noDataRowOutlet) {\n            this._hasAllOutlets = true;\n            // In some setups this may fire before `ngAfterContentInit`\n            // so we need a check here. See #28538.\n            if (this._canRender()) {\n                this._render();\n            }\n        }\n    }\n    /** Whether the table has all the information to start rendering. */\n    _canRender() {\n        return this._hasAllOutlets && this._hasInitialized;\n    }\n    /** Renders the table if its state has changed. */\n    _render() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            if (this._rowOutlet) {\n                this._rowOutlet.viewContainer.clear();\n            }\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n        this._changeDetectorRef.markForCheck();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTable, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: 'role', attribute: true }, { token: i1.Directionality, optional: true }, { token: DOCUMENT }, { token: i2.Platform }, { token: _VIEW_REPEATER_STRATEGY }, { token: _COALESCED_STYLE_SCHEDULER }, { token: i3.ViewportRuler }, { token: STICKY_POSITIONING_LISTENER, optional: true, skipSelf: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: CdkTable, isStandalone: true, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: [\"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute], fixedLayout: [\"fixedLayout\", \"fixedLayout\", booleanAttribute] }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"/>\\n  <ng-content select=\\\"colgroup, col\\\"/>\\n\\n  <!--\\n    Unprojected content throws a hydration error so we need this to capture it.\\n    It gets removed on the client so it doesn't affect the layout.\\n  -->\\n  @if (_isServer) {\\n    <ng-content/>\\n  }\\n\\n  @if (_isNativeHtmlTable) {\\n    <thead role=\\\"rowgroup\\\">\\n      <ng-container headerRowOutlet/>\\n    </thead>\\n    <tbody role=\\\"rowgroup\\\">\\n      <ng-container rowOutlet/>\\n      <ng-container noDataRowOutlet/>\\n    </tbody>\\n    <tfoot role=\\\"rowgroup\\\">\\n      <ng-container footerRowOutlet/>\\n    </tfoot>\\n  } @else {\\n    <ng-container headerRowOutlet/>\\n    <ng-container rowOutlet/>\\n    <ng-container noDataRowOutlet/>\\n    <ng-container footerRowOutlet/>\\n  }\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], standalone: true, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"] }]\n        }], ctorParameters: () => [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['role']\n                }] }, { type: i1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i2.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                    type: Inject,\n                    args: [_COALESCED_STYLE_SCHEDULER]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [STICKY_POSITIONING_LISTENER]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }], propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], fixedLayout: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], contentChanged: [{\n                type: Output\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n    const uppercaseSection = section.toUpperCase();\n    let current = outlet.viewContainer.element.nativeElement;\n    while (current) {\n        // 1 is an element node.\n        const nodeName = current.nodeType === 1 ? current.nodeName : null;\n        if (nodeName === uppercaseSection) {\n            return current;\n        }\n        else if (nodeName === 'TABLE') {\n            // Stop traversing past the `table` node.\n            break;\n        }\n        current = current.parentNode;\n    }\n    return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTextColumn, deps: [{ token: CdkTable, optional: true }, { token: TEXT_COLUMN_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkTextColumn, isStandalone: true, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"cdkColumnDef\", \"sticky\", \"stickyEnd\"] }, { kind: \"directive\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { kind: \"directive\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { kind: \"directive\", type: CdkCellDef, selector: \"[cdkCellDef]\" }, { kind: \"directive\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    standalone: true,\n                    imports: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n                }]\n        }], ctorParameters: () => [{ type: CdkTable, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [TEXT_COLUMN_OPTIONS]\n                }] }], propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule, CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet], exports: [CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule, ...EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n * @deprecated Implement the `CanStick` interface instead.\n * @breaking-change 19.0.0\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}