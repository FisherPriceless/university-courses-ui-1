{"ast":null,"code":"var __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nimport { Component, ViewChild } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatPaginatorModule, MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { AddCourseDialogComponent } from './dialog/add-course-dialog.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { EditCourseDialogComponent } from './dialog/edit-course-dialog.component';\nlet AppComponent = (() => {\n  let _classDecorators = [Component({\n    selector: 'app-root',\n    standalone: true,\n    imports: [CommonModule, MatTableModule, MatInputModule, MatPaginatorModule, MatIconModule, HttpClientModule, MatTooltipModule, MatDialogModule, AddCourseDialogComponent],\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  let _paginator_decorators;\n  let _paginator_initializers = [];\n  let _paginator_extraInitializers = [];\n  var AppComponent = class {\n    static #_ = _classThis = this;\n    static #_2 = (() => {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      _paginator_decorators = [ViewChild(MatPaginator)];\n      __esDecorate(null, null, _paginator_decorators, {\n        kind: \"field\",\n        name: \"paginator\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"paginator\" in obj,\n          get: obj => obj.paginator,\n          set: (obj, value) => {\n            obj.paginator = value;\n          }\n        },\n        metadata: _metadata\n      }, _paginator_initializers, _paginator_extraInitializers);\n      __esDecorate(null, _classDescriptor = {\n        value: _classThis\n      }, _classDecorators, {\n        kind: \"class\",\n        name: _classThis.name,\n        metadata: _metadata\n      }, null, _classExtraInitializers);\n      AppComponent = _classThis = _classDescriptor.value;\n      if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n      __runInitializers(_classThis, _classExtraInitializers);\n    })();\n    constructor(http, dialog) {\n      this.http = http;\n      this.dialog = dialog;\n      this.displayedColumns = ['actions', 'courseName', 'location', 'start', 'length', 'price'];\n      this.dataSource = new MatTableDataSource();\n      this.paginator = __runInitializers(this, _paginator_initializers, void 0);\n      __runInitializers(this, _paginator_extraInitializers);\n      this.http = http;\n      this.dialog = dialog;\n    }\n    ngOnInit() {\n      this.fetchCourses();\n    }\n    fetchCourses() {\n      this.http.get('http://127.0.0.1:5000/courses').subscribe(data => {\n        const courses = data.map(course => ({\n          _id: course._id,\n          courseName: course.CourseName,\n          university: course.University,\n          location: `${course.City}, ${course.Country}, ${course.University}`,\n          start: new Date(course.StartDate).toLocaleDateString(),\n          end: new Date(course.EndDate).toLocaleDateString(),\n          length: this.calculateCourseLength(course.StartDate, course.EndDate),\n          price: course.Price,\n          currency: course.Currency,\n          courseDescription: course.CourseDescription,\n          city: course.City,\n          country: course.Country\n        }));\n        courses.sort((a, b) => new Date(b.start).getTime() - new Date(a.start).getTime());\n        this.dataSource.data = courses;\n        this.dataSource.paginator = this.paginator;\n      }, error => {\n        console.error('There was an error fetching the courses!', error);\n      });\n    }\n    ngAfterViewInit() {\n      this.dataSource.paginator = this.paginator;\n    }\n    calculateCourseLength(startDate, endDate) {\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      const diffTime = Math.abs(end.getTime() - start.getTime());\n      return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    }\n    applyFilter(event) {\n      const filterValue = event.target.value.toLowerCase();\n      this.dataSource.filter = filterValue.trim().toLowerCase();\n    }\n    removeCourse(course) {\n      this.http.delete(`http://127.0.0.1:5000/courses/${course._id}`).subscribe(() => {\n        const index = this.dataSource.data.indexOf(course);\n        if (index >= 0) {\n          this.dataSource.data.splice(index, 1);\n          this.dataSource._updateChangeSubscription();\n        }\n      }, error => {\n        console.error('There was an error deleting the course!', error);\n      });\n    }\n    editCourse(course) {\n      const dialogRef = this.dialog.open(EditCourseDialogComponent, {\n        width: '850px',\n        height: '800px',\n        data: course\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.fetchCourses();\n        }\n        console.log('The dialog was closed');\n      });\n    }\n    addNewCourse() {\n      const dialogRef = this.dialog.open(AddCourseDialogComponent, {\n        width: '850px',\n        height: '800px'\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.fetchCourses();\n        }\n        console.log('The dialog was closed');\n      });\n    }\n  };\n  return AppComponent = _classThis;\n})();\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}