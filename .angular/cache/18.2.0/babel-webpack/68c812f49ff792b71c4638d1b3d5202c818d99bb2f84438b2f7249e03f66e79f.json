{"ast":null,"code":"var __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatSelectModule } from '@angular/material/select';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nlet EditCourseDialogComponent = (() => {\n  let _classDecorators = [Component({\n    selector: 'app-edit-course-dialog',\n    standalone: true,\n    imports: [CommonModule, MatFormFieldModule, MatInputModule, MatButtonModule, MatAutocompleteModule, MatSelectModule, ReactiveFormsModule],\n    template: `\n    <form [formGroup]=\"courseForm\" (ngSubmit)=\"onSave()\" class=\"dialog-form\">\n      <div mat-dialog-content class=\"dialog-content\">\n        <h2 mat-dialog-title>Edit Course</h2>\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\n          <mat-label>University</mat-label>\n          <input matInput formControlName=\"university\" readonly>\n        </mat-form-field>\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\n          <mat-label>City</mat-label>\n          <input matInput formControlName=\"city\" readonly>\n        </mat-form-field>\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\n          <mat-label>Country</mat-label>\n          <input matInput formControlName=\"country\" readonly>\n        </mat-form-field>\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\n          <mat-label>Course Name</mat-label>\n          <input matInput formControlName=\"courseName\" readonly>\n        </mat-form-field>\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\n          <mat-label>Course Description</mat-label>\n          <textarea matInput formControlName=\"courseDescription\" placeholder=\"Enter course description\" required></textarea>\n        </mat-form-field>\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\n          <mat-label>Start Date</mat-label>\n          <input matInput formControlName=\"startDate\" placeholder=\"YYYY/MM/DD\" required (input)=\"formatDate($event)\" [ngClass]=\"{'invalid-date': startDateInvalid}\">\n          <mat-error *ngIf=\"startDateInvalid\">Invalid Start Date</mat-error>\n        </mat-form-field>\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\n          <mat-label>End Date</mat-label>\n          <input matInput formControlName=\"endDate\" placeholder=\"YYYY/MM/DD\" required (input)=\"formatDate($event)\" [ngClass]=\"{'invalid-date': endDateInvalid}\">\n          <mat-error *ngIf=\"endDateInvalid\">End Date must be after Start Date</mat-error>\n        </mat-form-field>\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\n          <mat-label>Price</mat-label>\n          <input matInput formControlName=\"price\" type=\"number\" placeholder=\"Enter price\" required>\n        </mat-form-field>\n        <mat-form-field appearance=\"fill\" class=\"full-width\">\n          <mat-label>Currency</mat-label>\n          <mat-select formControlName=\"currency\" required>\n            <mat-option *ngFor=\"let currency of currencies\" [value]=\"currency\">\n              {{ currency }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n      <div mat-dialog-actions class=\"dialog-actions\">\n        <button mat-button type=\"button\" (click)=\"onCancel()\">Cancel</button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"courseForm.invalid || startDateInvalid || endDateInvalid\">Save</button>\n      </div>\n    </form>\n  `,\n    styles: [`\n    .dialog-form {\n      width: 100%;\n    }\n    .full-width {\n      width: 100%;\n    }\n    .dialog-content {\n      padding: 0 24px;\n      margin-bottom: 16px;\n      margin-top: 16px;\n    }\n    :host ::ng-deep .mat-dialog-container {\n      border-radius: 0;\n      width: 100%;\n      max-width: 600px;\n      margin: 0 auto;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    h2.mat-dialog-title {\n      width: 100%;\n      margin: 0;\n      text-align: center;\n      padding: 8px 24px;\n    }\n    .dialog-actions {\n      display: flex;\n      justify-content: flex-end;\n      padding: 8px 24px;\n    }\n    .invalid-date {\n      border-color: red;\n    }\n  `]\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  var EditCourseDialogComponent = class {\n    static #_ = _classThis = this;\n    static #_2 = (() => {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      __esDecorate(null, _classDescriptor = {\n        value: _classThis\n      }, _classDecorators, {\n        kind: \"class\",\n        name: _classThis.name,\n        metadata: _metadata\n      }, null, _classExtraInitializers);\n      EditCourseDialogComponent = _classThis = _classDescriptor.value;\n      if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n      __runInitializers(_classThis, _classExtraInitializers);\n    })();\n    constructor(dialogRef, fb, http, data) {\n      this.dialogRef = dialogRef;\n      this.fb = fb;\n      this.http = http;\n      this.data = data;\n      this.startDateInvalid = false;\n      this.endDateInvalid = false;\n      this.universities = [];\n      this.filteredUniversities = [];\n      this.countries = [];\n      this.filteredCountries = [];\n      this.cities = [];\n      this.filteredCities = [];\n      this.currencies = ['USD', 'EUR', 'CZK', 'GBP', 'AUD', 'CAD', 'JPY'];\n      this.courseForm = this.fb.group({\n        courseName: [{\n          value: '',\n          disabled: true\n        }, Validators.required],\n        university: [{\n          value: '',\n          disabled: true\n        }, Validators.required],\n        city: [{\n          value: '',\n          disabled: true\n        }, Validators.required],\n        country: [{\n          value: '',\n          disabled: true\n        }, Validators.required],\n        startDate: ['', [Validators.required, this.dateValidator]],\n        endDate: ['', [Validators.required, this.dateValidator, this.endDateValidator.bind(this)]],\n        courseDescription: ['', Validators.required],\n        price: [0, [Validators.required, Validators.min(0)]],\n        currency: ['', Validators.required]\n      });\n    }\n    ngOnInit() {\n      this.loadData();\n      if (this.data) {\n        this.courseForm.patchValue({\n          courseName: this.data.courseName,\n          university: this.data.university,\n          city: this.data.city,\n          country: this.data.country,\n          startDate: this.data.start,\n          endDate: this.data.end,\n          courseDescription: this.data.courseDescription,\n          price: this.data.price,\n          currency: this.data.currency\n        });\n        console.log('Start Date:', this.data.startDate || this.data.StartDate || this.data.start);\n        console.log('End Date:', this.data.endDate || this.data.EndDate || this.data.end);\n      }\n      this.courseForm.get('university').valueChanges.subscribe(value => {\n        this.filteredUniversities = this.filterOptions(value, this.universities);\n      });\n      this.courseForm.get('country').valueChanges.subscribe(value => {\n        this.filteredCountries = this.filterOptions(value, this.countries);\n      });\n      this.courseForm.get('city').valueChanges.subscribe(value => {\n        this.filteredCities = this.filterOptions(value, this.cities);\n      });\n    }\n    loadData() {\n      this.http.get('http://127.0.0.1:5000/courses').subscribe(data => {\n        this.universities = Array.from(new Set(data.map(course => course.University).filter(Boolean)));\n        this.countries = Array.from(new Set(data.map(course => course.Country).filter(Boolean)));\n        this.cities = Array.from(new Set(data.map(course => course.City).filter(Boolean)));\n      });\n    }\n    filterOptions(value, options) {\n      const filterValue = value.toLowerCase();\n      return options.filter(option => option.toLowerCase().includes(filterValue));\n    }\n    formatDate(event) {\n      const input = event.target.value.replace(/[^0-9]/g, '');\n      if (input.length >= 4 && input.length <= 6) {\n        event.target.value = input.substring(0, 4) + '/' + input.substring(4, 6);\n      } else if (input.length > 6) {\n        event.target.value = input.substring(0, 4) + '/' + input.substring(4, 6) + '/' + input.substring(6, 8);\n      }\n      event.target.value = event.target.value.substring(0, 10);\n    }\n    dateValidator(control) {\n      const value = control.value;\n      if (value && !/^\\d{4}\\/\\d{2}\\/\\d{2}$/.test(value)) {\n        return {\n          'invalidDate': true\n        };\n      }\n      return null;\n    }\n    endDateValidator(control) {\n      const startDate = this.courseForm?.get('startDate')?.value;\n      const endDate = control.value;\n      if (startDate && endDate && new Date(startDate) > new Date(endDate)) {\n        this.endDateInvalid = true;\n        return {\n          'endBeforeStart': true\n        };\n      }\n      this.endDateInvalid = false;\n      return null;\n    }\n    onCancel() {\n      this.dialogRef.close();\n    }\n    onSave() {\n      if (this.courseForm.valid && !this.startDateInvalid && !this.endDateInvalid) {\n        const updatedCourseData = {\n          CourseName: this.courseForm.getRawValue().courseName,\n          University: this.courseForm.getRawValue().university,\n          City: this.courseForm.getRawValue().city,\n          Country: this.courseForm.getRawValue().country,\n          StartDate: new Date(this.courseForm.value.startDate).toISOString(),\n          EndDate: new Date(this.courseForm.value.endDate).toISOString(),\n          CourseDescription: this.courseForm.value.courseDescription,\n          Price: this.courseForm.value.price,\n          Currency: this.courseForm.value.currency\n        };\n        this.http.put(`http://127.0.0.1:5000/courses/${this.data._id}`, updatedCourseData).subscribe(response => {\n          console.log('Course updated successfully', response);\n          this.dialogRef.close(updatedCourseData);\n        }, error => {\n          console.error('Error updating course', error);\n        });\n      }\n    }\n  };\n  return EditCourseDialogComponent = _classThis;\n})();\nexport { EditCourseDialogComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}